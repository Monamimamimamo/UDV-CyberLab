version: '3.4'

services:
  identity:
    build:
      context: .
      dockerfile: Api/IdentityService/Api/Dockerfile
    ports:
      - "5215:5215"
    depends_on:
      db:
        condition: service_healthy
    environment:
      - ConnectionStrings__DefaultConnection=User ID=postgres;Password=123;Host=db;Port=5432;Database=identityNEOLab;Pooling=true;
    networks:
      - database
    restart: always

  tests:
    build:
      context: .
      dockerfile: Api/TestService/Api/Dockerfile
    ports:
      - "5068:5068"
    depends_on:
      tests-db:
        condition: service_healthy
    environment:
      - ConnectionStrings__DefaultConnection=User ID=postgres;Password=123;Host=tests-db;Port=5432;Database=testsNEOLab;Pooling=true;
    networks:
      - database
    restart: always

  projects:
    build:
      context: .
      dockerfile: Api/ProjectService/Api/Dockerfile
    ports:
      - "5108:5108"
    depends_on:
      tests-db:
        condition: service_healthy
    environment:
      - ConnectionStrings__DefaultConnection=User ID=postgres;Password=123;Host=projects-db;Port=5432;Database=projectsNEOLab;Pooling=true;
      - YandexStorage__BucketName=${YANDEX_BUCKET_NAME}
      - YandexStorage__ServiceUrl=${YANDEX_SERVICE_URL}
      - YandexStorage__AccessKey=${YANDEX_ACCESS_KEY}
      - YandexStorage__SecretKey=${YANDEX_SECRET_KEY}
    networks:
      - database
    restart: always

  db:
    image: postgres:latest
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 123
      POSTGRES_DB: identityNEOLab
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    command: >
      postgres
      -c shared_preload_libraries=pg_stat_statements
    networks:
      - database
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  tests-db:
    image: postgres:latest
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 123
      POSTGRES_DB: testsNEOLab
    volumes:
      - tests_postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    command: >
      postgres
      -c shared_preload_libraries=pg_stat_statements
    networks:
      - database
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  projects-db:
    image: postgres:latest
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 123
      POSTGRES_DB: projectsNEOLab
    volumes:
      - projects_postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    command: >
      postgres
      -c shared_preload_libraries=pg_stat_statements
    networks:
      - database
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - database
    depends_on:
      - db
      - tests-db

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    volumes:
      - grafana-storage:/var/lib/grafana
      - ./monitoring/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/datasources:/etc/grafana/provisioning/datasources
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    networks:
      - database
    depends_on:
      - prometheus



  postgres-exporter:
    image: prometheuscommunity/postgres-exporter
    environment:
      DATA_SOURCE_NAME: "postgresql://postgres:123@db:5432/identityNEOLab?sslmode=disable"
    ports:
      - "9187:9187"
    networks:
      - database
    depends_on:
      - db

  tests-postgres-exporter:
    image: prometheuscommunity/postgres-exporter
    environment:
      DATA_SOURCE_NAME: "postgresql://postgres:123@tests-db:5432/testsNEOLab?sslmode=disable"
    ports:
      - "9188:9187"
    networks:
      - database
    depends_on:
      - tests-db

volumes:
  postgres_data:
  tests_postgres_data:
  projects_postgres_data:
  grafana-storage:

networks:
  database:
    driver: bridge